#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# Fail immediately on non-zero exit code.
set -e
# Fail immediately on non-zero exit code within a pipeline.
set -o pipefail
# Fail on undeclared variables.
set -u
# Debug, echo every command
#set -x

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3
BP_DIR=`cd $(dirname $0); cd ..; pwd`

# Use architecture of multi-buildpack to compose behavior.
# https://github.com/heroku/heroku-buildpack-multi
cp $BP_DIR/.buildpacks $BUILD_DIR/.buildpacks
url=https://github.com/heroku/heroku-buildpack-multi.git
branch=""
dir=$(mktemp -t buildpackXXXXX)
rm -rf $dir

echo "-----> Configure create-react-app build environment"
# Set env vars for the inner buildpacks in `.buildpacks`
# * during compile, install build tooling (devDependencies) with npm & Yarn
# * in runtime, NODE_ENV is not used (this buildpack launches a static web server)
INHERITED_NODE_ENV="${NODE_ENV:-development}"
if [ "$INHERITED_NODE_ENV" = "production" ]
  then
  echo '       Setting `NODE_ENV=development` to install dependencies for `npm build`'
  export NODE_ENV=development
else
  echo "       Using \`NODE_ENV=${INHERITED_NODE_ENV}\`"
  export NODE_ENV="${INHERITED_NODE_ENV}"
fi

echo "=====> Downloading Buildpack: $url"

if [[ "$url" =~ \.tgz$ ]] || [[ "$url" =~ \.tgz\? ]]; then
  mkdir -p "$dir"
  curl -s "$url" | tar xvz -C "$dir" >/dev/null 2>&1
else
  git clone $url $dir >/dev/null 2>&1
fi
cd $dir

if [ "$branch" != "" ]; then
  git checkout $branch >/dev/null 2>&1
fi

chmod -f +x $dir/bin/{detect,compile,release}

framework=$($dir/bin/detect $1)

if [ $? == 0 ]; then
  echo "=====> Detected Framework: $framework"
  $dir/bin/compile $BUILD_DIR $CACHE_DIR $ENV_DIR

  if [ $? != 0 ]; then
    exit 1
  fi
else
  echo "create-react-app `.buildpacks` not defined. Exiting."
  exit 1
fi
